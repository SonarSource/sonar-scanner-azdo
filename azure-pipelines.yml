# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, upload, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

schedules:
  # Run from Monday to Friday at 2:0 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
  - cron: "0 2 * * 1-5"
    displayName: Nightly build
    branches:
      include:
        - master
    always: true

trigger:
  - master

pool:
  vmImage: ubuntu-latest

variables:
  - group: sonar-scanner-azdo-variables
  - group: artifactory_access
  - name: System.debug
    value: true
  - name: NPM_CONFIG_registry
    value: $(ARTIFACTORY_URL)/api/npm/npm
  - name: isMain
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  - name: azureBranch
    value: $[coalesce(variables['System.PullRequest.SourceBranch'], 'master')]

stages:
  - stage: build
    displayName: "Build:"
    jobs:
      - job: npminstall
        displayName: "NPM Install, CI and Build"
        variables:
          publisher: $(SonarSourceITPublisher)
        steps:
          - task: Npm@1
            displayName: "Update npm"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              command: "custom"
              customCommand: "i -g npm@latest"

          - task: Bash@3
            displayName: "Install all extension dependencies"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              filePath: "scripts/install.sh"

          - task: Bash@3
            displayName: "Append build id in version in manifests"
            inputs:
              targetType: "inline"
              script: |
                npx gulp ci:azure:hotfix-extensions-version
                npx gulp ci:azure:hotfix-tasks-version
                npx gulp ci:azure:hotfix-tasks-names

          - task: Npm@1
            displayName: "Create test extension"
            inputs:
              command: "custom"
              customCommand: "run test-build -- --publisher $(publisher)"

          - task: CopyFiles@2
            displayName: "Copy artifacts to build directory"
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)/dist"
              Contents: "*.vsix"
              TargetFolder: "$(Agent.BuildDirectory)/a"

          - task: Bash@3
            displayName: "Fetch extensions versions and rename vsix"
            name: versions
            inputs:
              targetType: "inline"
              script: |
                npx gulp ci:azure:get-extensions-version

          - task: PublishBuildArtifacts@1
            displayName: "Publish artifacts on the build"
            inputs:
              PathtoPublish: "$(Agent.BuildDirectory)/a"
              ArtifactName: "extensions"
  - stage: run_qa
    condition: succeeded()
    dependsOn: build
    displayName: "Re-publish test extension & Run QA"
    jobs:
      - job: "run_qa"
        variables:
          publisher: $(SonarSourceITPublisher)
          sqExtensionVersion: $[stageDependencies.build.npminstall.outputs['versions.SQ_VERSION']]
          scExtensionVersion: $[stageDependencies.build.npminstall.outputs['versions.SC_VERSION']]
          itOrg: $(SonarSourceITOrganization)
        steps:
          - bash: |
              echo "##vso[task.setvariable variable=SC_VERSION;isoutput=true]$(scExtensionVersion)"
            name: versions

          # Install TFX
          - task: TfxInstaller@4
            displayName: "Install TFX CLI"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              version: "v0.10.x"

          # Publish Extension
          - task: DownloadBuildArtifacts@1
            displayName: "Download artifacts"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "extensions"
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: PublishAzureDevOpsExtension@4
            displayName: "Publish SonarCloud test extension"
            inputs:
              connectTo: "VsTeam"
              connectedServiceName: "AzDo Extension - Marketplace - IntegrationTests"
              fileType: "vsix"
              vsixFile: "$(System.ArtifactsDirectory)/extensions/sonar-scanner-azdo-$(scExtensionVersion)-sonarcloud.vsix"
              extensionName: "[Test] SonarCloud ITs"
              updateTasksVersion: false
              updateTasksId: false
              extensionVisibility: "private"
              shareWith: "$(itOrg)"
              cwd: "$(System.ArtifactsDirectory)"

          # Install extension
          - task: InstallAzureDevOpsExtension@4
            displayName: "Install extension in IT org"
            inputs:
              connectTo: "VsTeam"
              connectedServiceName: "AzDo Extension - Marketplace - IntegrationTests"
              method: "id"
              publisherId: "$(publisher)"
              extensionId: "sonarcloud-test"
              accounts: "https://devops.azure.com/$(itOrg)"

          # Run ITs
          - task: Bash@3
            displayName: "Install all dependencies"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              filePath: "scripts/install.sh"
          - task: Bash@3
            displayName: "Install all extension dependencies"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              filePath: "scripts/install.sh"
          - task: Bash@3
            displayName: "Run the ITs"
            env:
              SONARCLOUD_TOKEN: $(SonarCloudToken)
              AZURE_TOKEN: $(SonarSourceITOrganizationPAT)
              AZURE_BRANCH: $(azureBranch)
            inputs:
              targetType: "inline"
              script: |
                npm run test-its

  - stage: publish_dogfood
    displayName: "Publish dogfood extension"
    condition: and(succeeded(), eq(variables['isMain'], true))
    jobs:
      - job: "publish_dogfood"
        variables:
          publisher: $(SonarSourceITPublisher)
          scExtensionVersion: $[stageDependencies.run_qa.run_qa.outputs['versions.SC_VERSION']]
        steps:
          - task: TfxInstaller@4
            displayName: "Install TFX CLI"
            env:
              NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: $(ARTIFACTORY_PRIVATE_READER_ACCESS_TOKEN)
            inputs:
              version: "v0.10.x"

          - task: DownloadBuildArtifacts@1
            displayName: "Download artifacts"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "extensions"
              downloadPath: "$(System.ArtifactsDirectory)"

          - task: PublishAzureDevOpsExtension@4
            displayName: "Publish SonarCloud dogfood extension"
            inputs:
              connectTo: "VsTeam"
              connectedServiceName: "AzDO Extension - Marketplace - Dogfood"
              fileType: "vsix"
              vsixFile: "$(System.ArtifactsDirectory)/extensions/sonar-scanner-azdo-$(scExtensionVersion)-sonarcloud.vsix"
              extensionName: "[Dogfood] SonarCloud"
              extensionId: "sonarcloud-dogfood"
              updateTasksVersion: false
              updateTasksId: false
              extensionVisibility: "private"
              shareWith: "sonarsource"
              cwd: "$(System.ArtifactsDirectory)"
