# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - group: sonar-scanner-vsts-variables

stages:
- stage: build
  displayName: 'Build:'
  jobs:
  - job: npminstall
    displayName: 'NPM Install, CI and Build'
    variables:
      publisher: $(SonarSourceITPublisher)
    steps:
    - task: Npm@1
      displayName: 'Update npm'
      inputs:
        command: 'custom'
        customCommand: 'i -g npm@latest'

    - task: Bash@3
      displayName: 'Install all dependencies'
      inputs:
        filePath: 'cirrus/cirrus-install.sh'
        arguments: 'full'

    - task: Npm@1
      displayName: 'Run Validate-CI'
      inputs:
        command: 'custom'
        customCommand: 'run validate-ci'

    - task: Npm@1
      displayName: 'Create test extension'
      inputs:
        command: 'custom'
        customCommand: 'run test-build -- --publisher $(publisher)'

    - task: CopyFiles@2
      displayName: 'Copy artefacts to build directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/build'
        Contents: '*.vsix'
        TargetFolder: '$(Agent.BuildDirectory)/a'

    - task: PowerShell@2
      displayName: 'Fetch extensions versions and rename vsix'
      name: versions
      inputs:
        targetType: 'inline'
        script: |
            # Write your PowerShell commands here.
            
            . (Join-Path "azp" "helpers.ps1")

            $sqExtensionManifest = "$env:BUILD_SOURCESDIRECTORY/build/extensions/sonarqube/vss-extension.json"
            $version = Get-ExtensionVersion $sqExtensionManifest 'SonarQube'

            $extensionNewName = "$env:AGENT_BUILDDIRECTORY/a/sonar-scanner-vsts-${version}.$env:BUILD_BUILDID-sonarqube.vsix"

            Write-Host "##vso[task.setvariable variable=SQ_EXT_NAME]$extensionNewName"
            Write-Host "##vso[task.setvariable variable=SQ_VERSION;isOutput=true]$version"

            Rename-Item -Path "$env:AGENT_BUILDDIRECTORY/a/sonar-scanner-vsts-0.0.2-SNAPSHOT-sonarqube.vsix" -NewName $extensionNewName

            $scExtensionManifest = "$env:BUILD_SOURCESDIRECTORY/build/extensions/sonarcloud/vss-extension.json"
            $version = Get-ExtensionVersion $scExtensionManifest 'SonarCloud'

            $extensionNewName = "$env:AGENT_BUILDDIRECTORY/a/sonar-scanner-vsts-${version}.$env:BUILD_BUILDID-sonarcloud.vsix"

            Write-Host "##vso[task.setvariable variable=SC_EXT_NAME]$extensionNewName"
            Write-Host "##vso[task.setvariable variable=SC_VERSION;isOutput=true]$version"

            Rename-Item -Path "$env:AGENT_BUILDDIRECTORY/a/sonar-scanner-vsts-0.0.2-SNAPSHOT-sonarcloud.vsix" -NewName $extensionNewName

            $version = Get-AzureDevopsTaskVersion "$env:BUILD_SOURCESDIRECTORY/build/extensions" "sonarcloud" "analyze" "v1"
            Write-Host "##vso[task.setvariable variable=SC_V1_ANALYZE_VERSION;isOutput=true]$version"

            $version = Get-AzureDevopsTaskVersion "$env:BUILD_SOURCESDIRECTORY/build/extensions" "sonarcloud" "prepare" "v1"
            Write-Host "##vso[task.setvariable variable=SC_V1_PREPARE_VERSION;isOutput=true]$version"

            $version = Get-AzureDevopsTaskVersion "$env:BUILD_SOURCESDIRECTORY/build/extensions" "sonarcloud" "publish" "v1"
            Write-Host "##vso[task.setvariable variable=SC_V1_PUBLISH_VERSION;isOutput=true]$version"
        pwsh: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts on the build'
      inputs:
        PathtoPublish: '$(Agent.BuildDirectory)/a'
        ArtifactName: 'extensions'
- stage: unpublish
  condition: succeeded()
  dependsOn: build
  displayName: 'Unpublish test extension:'
  jobs:
  - job: 'unpublishextensions'
    displayName: 'Unpublish test extensions on Marketplace'
    variables:
      publisher: $(SonarSourceITPublisher)
    steps: 
    - task: TfxInstaller@3
      displayName: 'Install TFX CLI'
      inputs:
        version: 'v0.10.x'
    - task: UnpublishAzureDevOpsExtension@3
      displayName: 'Remove SonarCloud test extension from CI publisher'
      inputs:
        connectTo: 'VsTeam'
        connectedServiceName: 'AzDo Extension - Marketplace - IntegrationTests'
        method: 'id'
        publisherId: '$(publisher)'
        extensionId: 'sonarcloud'
    - task: UnpublishAzureDevOpsExtension@3
      displayName: 'Remove SonarQube test extension from CI publisher'
      inputs:
        connectTo: 'VsTeam'
        connectedServiceName: 'AzDo Extension - Marketplace - IntegrationTests'
        method: 'id'
        publisherId: '$(publisher)'
        extensionId: 'sonarqube'
- stage: publish
  condition: succeeded()
  dependsOn: 
    - build
    - unpublish
  displayName: 'Publish test extensions:'
  jobs:
  - job: 'publishextensions'
    displayName: 'Publish test extensions on Marketplace'
    variables:
      sqExtensionVersion: $[ stageDependencies.build.npminstall.outputs['versions.SQ_VERSION'] ]
      scExtensionVersion: $[ stageDependencies.build.npminstall.outputs['versions.SC_VERSION'] ]
      itOrg: $(SonarSourceITOrganization)
      publisher: $(SonarSourceITPublisher)
    steps: 
      - task: TfxInstaller@3
        displayName: 'Install TFX CLI'
        inputs:
          version: 'v0.10.x'
      - task: DownloadBuildArtifacts@1
        displayName: 'Download artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'extensions'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: PublishAzureDevOpsExtension@3
        displayName: 'Publish SonarCloud test extension'
        inputs:
          connectTo: 'VsTeam'
          connectedServiceName: 'AzDo Extension - Marketplace - IntegrationTests'
          fileType: 'vsix'
          vsixFile: '$(System.ArtifactsDirectory)/extensions/sonar-scanner-vsts-$(scExtensionVersion).$(Build.BuildId)-sonarcloud.vsix'
          extensionName: '[Test] SonarCloud ITs'
          updateTasksVersion: false
          updateTasksId: false
          extensionVisibility: 'private'
          shareWith: '$(itOrg)'
          cwd: '$(System.ArtifactsDirectory)'
      - task: InstallAzureDevOpsExtension@3
        displayName: 'Install extension in IT org'
        inputs:
          connectTo: 'VsTeam'
          connectedServiceName: 'AzDo Extension - Marketplace - IntegrationTests'
          method: 'id'
          publisherId: '$(publisher)'
          extensionId: 'sonarcloud'
          accounts: 'https://devops.azure.com/$(itOrg)'

- stage: qa
  dependsOn: 
    - build
    - publish
  displayName: 'QA:'
  condition: succeeded()
  jobs:
  - job: 'runqa'
    displayName: 'Run QA'
    variables:
         PrepareVersion: $[ stageDependencies.build.npminstall.outputs['versions.SC_V1_PREPARE_VERSION'] ]
         AnalyzeVersion: $[ stageDependencies.build.npminstall.outputs['versions.SC_V1_ANALYZE_VERSION'] ]
         PublishVersion: $[ stageDependencies.build.npminstall.outputs['versions.SC_V1_PUBLISH_VERSION'] ]
    steps: 
     - task: DotNetCoreCLI@2
       displayName: 'Run Integration tests project'
       env:
         SC_TOKEN: $(SonarCloudToken)
         AZURE_TOKEN: $(PAT)
         PREPARE_TASK_VERSION: $(PrepareVersion)
         ANALYZE_TASK_VERSION: $(AnalyzeVersion)
         PUBLISH_TASK_VERSION: $(PublishVersion)
         AZDO_BASE_URL: $(AzdoBaseUrl)
         SONARCLOUD_BASE_URL: $(SonarCloudBaseUrl)
         AZDO_ITS_ORGA: $(AzdoItsOrga)
         AZDO_ITS_PROJECT_NAME: $(AzdoItsProjectName)
         AZDO_ITS_DOTNET_PIPELINE_NAME: $(AzdoItsDotnetPipelineName)
         AZDO_ITS_MAVEN_PIPELINE_NAME: $(AzdoItsMavenPipelineName)
         AZDO_ITS_GRADLE_PIPELINE_NAME: $(AzdoItsGradlePipelineName)
         AZDO_ITS_SCANNERCLI_PIPELINE_NAME: $(AzdoItsScannerCliPipelineName)
         SC_DOTNET_PROJECT_KEY: $(SonarCloudItsDotnetProjectKey)
         SC_MAVEN_PROJECT_KEY: $(SonarCloudItsMavenProjectKey)
         SC_GRADLE_PROJECT_KEY: $(SonarCloudItsGradleProjectKey)
         SC_SCANNERCLI_PROJECT_KEY: $(SonarCloudItsCLIProjectKey)
       inputs:
         command: 'test'
         projects: 'its/IntegrationTests.csproj'
